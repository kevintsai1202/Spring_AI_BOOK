spring:
  application:
    name: mcp-integration-system
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      base-url: https://api.openai.com
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.7
          max-tokens: 2000
    
    # MCP 配置
    mcp:
      enabled: true
      clients:
        # 檔案系統 MCP 伺服器
        filesystem:
          enabled: true
          transport:
            type: stdio
            command: "npx"
            args: ["@modelcontextprotocol/server-filesystem", "/path/to/allowed/directory"]
          timeout: 30s
        
        # 資料庫 MCP 伺服器
        database:
          enabled: true
          transport:
            type: stdio
            command: "python"
            args: ["-m", "mcp_server_database"]
          timeout: 30s
        
        # 網頁搜尋 MCP 伺服器
        web-search:
          enabled: true
          transport:
            type: http
            url: "http://localhost:3001/mcp"
          timeout: 30s
        
        # 企業 API MCP 伺服器
        enterprise-api:
          enabled: true
          transport:
            type: stdio
            command: "java"
            args: ["-jar", "enterprise-mcp-server.jar"]
          timeout: 60s
      
      # MCP 全域配置
      global:
        max-connections: 10
        connection-timeout: 30s
        read-timeout: 60s
        retry-attempts: 3
        enable-metrics: true
        enable-health-check: true

# 應用程式配置
server:
  port: 8080
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 50MB

# MCP 應用配置
app:
  mcp:
    # 工具管理配置
    tools:
      auto-discovery: true
      cache-enabled: true
      cache-ttl: 5m
      max-concurrent-executions: 10
      execution-timeout: 30s
    
    # 資源管理配置
    resources:
      cache-enabled: true
      cache-ttl: 10m
      max-cache-size: 1000
      preload-common: true
      batch-read-size: 10
    
    # 提示管理配置
    prompts:
      cache-enabled: true
      cache-ttl: 15m
      template-validation: true
      parameter-validation: true
    
    # 聊天整合配置
    chat:
      enable-tool-integration: true
      enable-resource-integration: true
      enable-prompt-integration: true
      max-tools-per-request: 5
      enable-streaming: true
      enable-history: true
      history-limit: 100
    
    # 安全配置
    security:
      enable-tool-validation: true
      enable-resource-validation: true
      allowed-domains: ["localhost", "*.company.com"]
      blocked-commands: ["rm", "del", "format"]
      enable-sandbox: true
    
    # 監控配置
    monitoring:
      enable-metrics: true
      enable-tracing: true
      enable-logging: true
      log-requests: true
      log-responses: false
      metrics-interval: 30s

# 資料庫配置
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:mcpdb}
    username: ${DB_USERNAME:mcpuser}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 3
      connection-timeout: 30000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

# Redis 配置
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

# 監控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,mcp
  endpoint:
    health:
      show-details: always
    mcp:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        mcp.tool.execution.duration: true
        mcp.resource.read.duration: true
        mcp.chat.response.duration: true

# 日誌配置
logging:
  level:
    org.springframework.ai: DEBUG
    org.springframework.ai.mcp: TRACE
    com.example: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/mcp-integration.log
    max-size: 100MB
    max-history: 30

# 開發環境配置
---
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  h2:
    console:
      enabled: true
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  
  ai:
    mcp:
      clients:
        filesystem:
          transport:
            args: ["@modelcontextprotocol/server-filesystem", "./test-data"]
        database:
          enabled: false
        web-search:
          enabled: false
        enterprise-api:
          enabled: false

app:
  mcp:
    tools:
      max-concurrent-executions: 3
    chat:
      history-limit: 20
    security:
      enable-sandbox: false

logging:
  level:
    org.springframework.ai.mcp: DEBUG
    com.example: TRACE

# 測試環境配置
---
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    hibernate:
      ddl-auto: create-drop
  
  ai:
    mcp:
      enabled: false

app:
  mcp:
    tools:
      cache-enabled: false
    resources:
      cache-enabled: false
    prompts:
      cache-enabled: false

# 生產環境配置
---
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  
  ai:
    mcp:
      global:
        max-connections: 20
        connection-timeout: 60s
        read-timeout: 120s

app:
  mcp:
    tools:
      max-concurrent-executions: 20
      execution-timeout: 60s
    resources:
      max-cache-size: 5000
    chat:
      history-limit: 500
    security:
      enable-tool-validation: true
      enable-resource-validation: true
      enable-sandbox: true

logging:
  level:
    org.springframework.ai: INFO
    org.springframework.ai.mcp: INFO
    com.example: INFO
    root: WARN

# Docker 環境配置
---
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/mcpdb
  
  data:
    redis:
      host: redis
      port: 6379
  
  ai:
    mcp:
      clients:
        filesystem:
          transport:
            args: ["@modelcontextprotocol/server-filesystem", "/app/data"]
        database:
          transport:
            command: "python3"
        web-search:
          transport:
            url: "http://mcp-web-search:3001/mcp"
        enterprise-api:
          transport:
            command: "java"
            args: ["-jar", "/app/enterprise-mcp-server.jar"]

# 應用程式資訊
info:
  app:
    name: MCP Integration System
    description: Spring AI MCP 整合系統 - 模型上下文協議整合
    version: 1.0.0
    features:
      - MCP 工具整合
      - MCP 資源管理
      - MCP 提示服務
      - 聊天機器人整合
      - 流式對話支援
      - 多伺服器支援
      - 安全沙箱
      - 效能監控