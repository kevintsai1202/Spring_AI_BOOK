spring:
  application:
    name: rag-implementation
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      base-url: https://api.openai.com
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.3
          max-tokens: 2000
      embedding:
        options:
          model: text-embedding-3-small
          dimensions: 1536
    
    vectorstore:
      neo4j:
        uri: ${NEO4J_URI:bolt://localhost:7687}
        username: ${NEO4J_USERNAME:neo4j}
        password: ${NEO4J_PASSWORD}
        database: ${NEO4J_DATABASE:neo4j}
        embedding-dimension: 1536
        distance-type: COSINE
        index-name: rag-embeddings

# 應用程式配置
server:
  port: 8080
  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 100MB

# RAG 系統配置
app:
  rag:
    # 文檔處理配置
    document:
      chunk-size: 1000
      chunk-overlap: 200
      max-document-size: 10MB
      supported-formats:
        - pdf
        - docx
        - txt
        - html
        - md
    
    # 檢索配置
    retrieval:
      top-k: 10
      similarity-threshold: 0.7
      max-context-length: 8000
      enable-reranking: true
    
    # 快取配置
    cache:
      enabled: true
      ttl: 1h
      max-size: 1000
      type: redis  # memory, redis
    
    # 效能配置
    performance:
      batch-size: 100
      max-concurrent-requests: 50
      query-timeout: 30s
      embedding-timeout: 10s

# 資料庫配置
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:ragdb}
    username: ${DB_USERNAME:raguser}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

# Redis 配置
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

# 監控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        rag.query.duration: true
        rag.embedding.duration: true

# 日誌配置
logging:
  level:
    org.springframework.ai: DEBUG
    com.example: DEBUG
    org.neo4j: INFO
    org.postgresql: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/rag-application.log
    max-size: 100MB
    max-history: 30

# 開發環境配置
---
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  h2:
    console:
      enabled: true
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

app:
  rag:
    cache:
      enabled: false
      type: memory
    performance:
      max-concurrent-requests: 10

logging:
  level:
    org.springframework.ai: TRACE
    com.example: TRACE

# 測試環境配置
---
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    hibernate:
      ddl-auto: create-drop

app:
  rag:
    cache:
      enabled: false
    performance:
      batch-size: 10
      max-concurrent-requests: 5

# 生產環境配置
---
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

app:
  rag:
    cache:
      enabled: true
      type: redis
      ttl: 6h
      max-size: 10000
    performance:
      batch-size: 200
      max-concurrent-requests: 100
      query-timeout: 60s

logging:
  level:
    org.springframework.ai: INFO
    com.example: INFO
    root: WARN

# Docker 環境配置
---
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/ragdb
  
  ai:
    vectorstore:
      neo4j:
        uri: bolt://neo4j:7687
  
  data:
    redis:
      host: redis
      port: 6379

# 應用程式資訊
info:
  app:
    name: RAG Implementation System
    description: 企業級 RAG 系統實作 - 文檔檢索增強生成
    version: 1.0.0
    features:
      - 多格式文檔處理
      - 智能文本分塊
      - 向量化嵌入
      - 語義相似性搜尋
      - 混合檢索策略
      - 查詢優化
      - 效能監控
      - 快取機制